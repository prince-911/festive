app.py
from flask import Flask, render_template, redirect, url_for, session, request, flash
from flask_mysqldb import MySQL 
from config import Config
from form import LoginForm, RegisterForm, BookingForm
from main import user_login_form, user_register_form, admin_login_form, admin_register_form, book_events, get_admin_data, get_user_data
from flask_wtf.csrf import CSRFProtect

@app.route('/register', methods=['GET', 'POST'])
def register():
    res = RegisterForm()
    if res.validate_on_submit():
        role = res.userrole.data
        name = res.name.data
        gender = res.gender.data
        phone = res.phone.data
        email = res.email.data
        password = res.password.data

        if role == 'user':
            checkuser = user_register_form(role, name, gender, phone, email, password)
            checkadmin = admin_register_form(role, name, gender, phone, email, password)
            if checkuser == 0:
                flash("User registered successfully")
                return redirect(url_for('login'))
            elif checkuser == 1:
                flash("User already exists")
                return redirect(url_for('login'))
            elif checkadmin:
                flash("Error: Admin credentials cannot be used as user")
                return redirect(url_for('register'))
        elif role == 'admin':
            checkadmin = admin_register_form(role, name, gender, phone, email, password)
            checkuser = user_register_form(role, name, gender, phone, email, password)
            if checkadmin == 0:
                flash("Admin registered successfully")
                return redirect(url_for('login'))
            elif checkadmin == 1:
                flash("Admin already exists")
                return redirect(url_for('login'))
            elif checkuser:
                flash("Error: User credentials cannot be used as Admin")
                return redirect(url_for('register'))
    return render_template('register.html', res=res)

main.py

import re
import MySQLdb.cursors

def validate_details(email, name, password):
   if not re.fullmatch(r"[^@]+@[^@]+\.[^@]+",email):
       return 1
   if not re.fullmatch(r"^([A-Z][a-z]+)( [A-Z][a-z]+){1,2}$",name) and len(name)>100:
       return 2
   if (len(password)<8 or len(password) > 20 or not re.search(r"[@#$%&_]",password) or
       not re.search(r"[A-Z]",password) or
       not re.search(r"[a-z]",password) or
       not re.search(r"[0-9]",password)):
       return 3
   return 0

    
def get_user_data(name):
   from app import mysql
   con=mysql.connect
   cur=con.cursor(MySQLdb.cursors.DictCursor)
   cur.execute("select name,email from user_details where name=%s",(name,))
   res=cur.fetchone()
   cur.close()
   if res:
      return res
   else:
      return None  

def get_admin_data(name):
   from app import mysql
   con=mysql.connect
   cur=con.cursor(MySQLdb.cursors.DictCursor)
   cur.execute("select name,email from admin_details where name=%s",(name,))
   res=cur.fetchone()
   cur.close()
   if res:
      return res
   else:
      return None     

def user_login_form(userrole,email,password):
   
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("select name,email,password from user_details where email=%s",(email,))
   res=cur.fetchone()
   cur.close()
   if userrole=='user':
        if res and res['password']==password:
            print("user already exits.Login successfully")
            return res['name']
        elif res and res['password']!=password:
            print("password is not correct")
            return "Incorrect"
        else:
            print("No user found.First register yourself")      
            return "No Data"

def user_register_form(userrole,name,gender,phone,email,password):
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("select password from user_details where email=%s",(email,)) 
   res=cur.fetchone()
   if userrole=='user':
      if res is None:
        cur.execute("insert into user_details(name,gender,phone,email,password) values(%s,%s,%s,%s,%s)",(name,gender,phone,email,password))
        con.commit()
        cur.close()
        print("User Registration successful")    
        return 0
      elif res:
        print("User Already exists") 
        return 1  

def admin_login_form(userrole,email,password):
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("select name,email,password from admin_details where email=%s",(email,))
   res=cur.fetchone()
   cur.close()
   if userrole=='admin':
      if res and res['password']==password:
         print("Admin already exits.Login successfully")
         return res['name']
      elif res and res['password']!=password:
         print("password is not correct")
         return "Incorrect"
      else:
         print("No admin found.First register yourself")      
         return "No Data"   

 

def admin_register_form(userrole,name,gender,phone,email,password):
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("select password from admin_details where email=%s",(email,)) 
   res=cur.fetchone()
   if userrole=='admin':
      if res is None:
        cur.execute("insert into admin_details(name,gender,phone,email,password) values(%s,%s,%s,%s,%s)",(name,gender,phone,email,password))
        con.commit()
        cur.close()
        print(" Admin Registration successful")    
        return 0
      else:
        print("Admin Already exists")     
        return 1
         

def book_events(date,starttime,endtime,location):
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("Select * from booking_details where starttime=%s and endtime=%s",(starttime,endtime))
   res=cur.fetchone()
   if res is None:
      cur.execute("Insert into booking_details (date,starttime,endtime,location) values(%s,%s,%s,%s)",(date,starttime,endtime,location))
      con.commit()
      cur.close()
      print("Booking successfully.Inserted in table")
      return 0
   else:
      print("Already book.Book another slot")
      return 1

table.sql
drop database if exists `mydb`;
create database `mydb`;
use `mydb`;

drop table if exists `user_details`;
create table `user_details`(
   id int primary key auto_increment,
   name varchar(50) not null,
   gender varchar(10) not null,
   phone int not null unique,
   email varchar(100) unique not null,
   password varchar(100) not null
)Engine=InnoDB;



drop table if exists `admin_details`;
create table `admin_details`(
   id int primary key auto_increment,
   name varchar(50) not null,
   gender varchar(10) not null,
   phone int unique not null,
   email varchar(50) unique not null,
   password varchar(50) not null
)Engine=InnoDB;


drop table if exists `booking_details`;
create table `booking_details`(
   id int primary key auto_increment,
   date date not null,
   starttime time not null,
   endtime time not null,
   location varchar(200) not null
)Engine=InnoDB;



   
