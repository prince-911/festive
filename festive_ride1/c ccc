admin.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/admin.css') }}">
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg" style="background: linear-gradient(90deg, #4f84e5 0%, #ffffff 100%);">
        <div class="container-fluid">
          <a class="navbar-brand text-dark" href="#">Admin Panel</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
              <li class="nav-item">
                <a class="nav-link text-dark" href="{{ url_for('home') }}">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link text-dark" href="{{ url_for('logout') }}">Logout</a>
              </li>
            </ul>
          </div>
        </div>
      </nav>
      
  
    {% if session['role'] == 'admin' %}
    <div class="container">
        <h2 class="text-center">Admin Dashboard</h2>

        <!-- Flash messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- Filter/Search form -->
        <form method="GET" action="{{ url_for('admin_dashboard') }}">
            <div style="display: flex; gap: 10px; align-items: center; margin-bottom: 20px;">
              <input type="text" name="search" placeholder="Search by name" value="{{ search_query }}" class="datafield" style="flex: 1;">
              <button type="submit" class="button">Search</button>
            </div>
          </form>
          

        <!-- Users table -->
        <h4>User Details</h4>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Gender</th>
                    <th>Phone No.</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for user in users %}
                <tr>
                    <td>{{ user.uid }}</td>
                    <td>{{ user.name }}</td>
                    <td>{{ user.email }}</td>
                    <td>{{ user.gender }}</td>
                    <td>{{ user.phone }}</td>
                    <td>
                        <div class="d-flex gap-1">
                            <form method="POST" action="{{ url_for('delete_user', user_id=user.id) }}" onsubmit="return confirm('Are you sure you want to delete this user?');">
                                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

        <!-- Booking table -->
        <h4 class="mt-5">Booking Details</h4>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                    <th>Location</th>
                    <th>Price</th>
                    <th>Theme</th>
                </tr>
            </thead>
            <tbody>
                {% for booking in bookings %}
                <tr>
                    <td>{{ booking.bid }}</td>
                    <td>{{ booking.date }}</td>
                    <td>{{ booking.starttime }}</td>
                    <td>{{ booking.endtime }}</td>
                    <td>{{ booking.location }}</td>
                    <td>{{ booking.price }}</td>
                    <td>{{ booking.theme_name }}</td>
                    <td>{{ booking.uid }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% else %}
    <div class="container">
        <h2 class="text-center">Access Denied</h2>
        <p>You do not have permission to view this page.</p>
    </div>
{% endif %}

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>
app.py
@app.route('/admin', methods=['GET'])
@no_cache
def admin_dashboard():
    if session.get('role') != 'admin':
        flash("You are not authorized to view this page", "danger")
        return redirect(url_for('index'))

    search_query = request.args.get('search', '').strip()
    users = get_all_users(search_query)
    bookings = get_all_bookings()

    return render_template("admin.html", users=users, bookings=bookings, search_query=search_query) 
ChatGPT said:

table.sql
drop database if exists `mydb`;
create database `mydb`;
use `mydb`;

drop table if exists `user_details`;
create table `user_details`(
   uid int primary key auto_increment,
   name varchar(50) not null,
   gender varchar(10) not null,
   phone varchar(10) not null unique,
   email varchar(100) unique not null,
   password varchar(100) not null
)Engine=InnoDB;



drop table if exists `admin_details`;
create table `admin_details`(
   aid int primary key auto_increment,
   name varchar(50) not null,
   gender varchar(10) not null,
   phone varchar(20) unique not null,
   email varchar(50) unique not null,
   password varchar(50) not null
)Engine=InnoDB;


drop table if exists `booking_details1`;
create table `booking_details1`(
   bid int primary key auto_increment,
   date date not null,
   starttime time not null,
   endtime time not null,
   location varchar(200) not null,
   price int not null,
   theme_name varchar(100) not null,
   uid int,
   foreign key(uid) REFERENCES user_details(uid)
)Engine=InnoDB;
 error is OperationalError
MySQLdb.OperationalError: (1054, "Unknown column 'id' in 'field list'")

Traceback (most recent call last)
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\flask\app.py", line 1536, in __call__
return self.wsgi_app(environ, start_response)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\flask\app.py", line 1514, in wsgi_app
response = self.handle_exception(e)
           ^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\flask\app.py", line 1511, in wsgi_app
response = self.full_dispatch_request()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\flask\app.py", line 919, in full_dispatch_request
rv = self.handle_user_exception(e)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\flask\app.py", line 917, in full_dispatch_request
rv = self.dispatch_request()
     ^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\flask\app.py", line 902, in dispatch_request
return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\prince09.TRN\Documents\Festive\Festive\app.py", line 19, in no_cache_view
response = make_response(view(*args, **kwargs))
                         ^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\prince09.TRN\Documents\Festive\Festive\app.py", line 38, in admin_dashboard
users = get_all_users(search_query)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\prince09.TRN\Documents\Festive\Festive\main.py", line 25, in get_all_users
cur.execute("SELECT id, name, email, gender, phone FROM user_details")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\MySQLdb\cursors.py", line 179, in execute
res = self._query(mogrified_query)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\MySQLdb\cursors.py", line 330, in _query
db.query(q)
^^^^^^^^^^^
File "C:\Users\prince09.TRN\AppData\Roaming\Python\Python312\site-packages\MySQLdb\connections.py", line 280, in query
_mysql.connection.query(self, query)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
MySQLdb.OperationalError: (1054, "Unknown column 'id' in 'field list'")
The debugger caught an exception in your WSGI application. You can now look at the traceback which led to the error.
To switch between the interactive traceback and the plaintext one, you can click on the "Traceback" headline. From the text traceback you can also create a paste of it. For code execution mouse-over the frame you want to debug and click on the console icon on the right side.

You can execute arbitrary Python code in the stack frames and there are some extra helpers available for introspection:

dump() shows all variables in the frame
dump(obj) dumps all that's known about the object
 


