from datetime import datetime,timedelta
from flask import flash
import re
import MySQLdb.cursors # type: ignore

def validate_details(email, name, password):
   if not re.fullmatch(r"[^@]+@[^@]+\.[^@]+",email):
       return 1
   if not re.fullmatch(r"^([A-Z][a-z]+)( [A-Z][a-z]+){1,2}$",name) and len(name)>100:
       return 2
   if (len(password)<8 or len(password) > 20 or not re.search(r"[@#$%&_]",password) or
       not re.search(r"[A-Z]",password) or
       not re.search(r"[a-z]",password) or
       not re.search(r"[0-9]",password)):
       return 3
   return 0

def get_all_users(search_query=None):
    from app import mysql
    con=mysql.connect
    cur=con.cursor(MySQLdb.cursors.DictCursor)
    if search_query:
        cur.execute("SELECT id, name, email, gender, phone FROM user_details WHERE name LIKE %s", (f"%{search_query}%",))
    else:
        cur.execute("SELECT id, name, email, gender, phone FROM user_details")
    users = cur.fetchall()
    cur.close()
    return users

def get_all_bookings():
    from app import mysql
    con=mysql.connect
    cur=con.cursor(MySQLdb.cursors.DictCursor)
    cur.execute("SELECT bid, date, starttime, endtime, location, price, theme_name,uid FROM booking_details1")
    bookings = cur.fetchall()
    cur.close()
    return bookings

def delete_user_by_id(user_id):
    from app import mysql
    con=mysql.connect
    cur=con.cursor(MySQLdb.cursors.DictCursor)
    cur.execute("DELETE FROM user_details WHERE id=%s", (user_id,))
    mysql.connection.commit()
    cur.close()
    con.commit()

    
def get_user_data(name):
   from app import mysql
   con=mysql.connect
   cur=con.cursor(MySQLdb.cursors.DictCursor)
   cur.execute("select uid,name,phone,email from user_details where name=%s",(name,))
   res=cur.fetchone()
   cur.close()
   if res:
      return res
   else:
      return None  

def get_admin_data(name):
   from app import mysql
   con=mysql.connect
   cur=con.cursor(MySQLdb.cursors.DictCursor)
   cur.execute("select name,email from admin_details where name=%s",(name,))
   res=cur.fetchone()
   cur.close()
   if res:
      return res
   else:
      return None     

def user_login_form(userrole,email,password):
   
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("select name,email,password from user_details where email=%s",(email,))
   res=cur.fetchone()
   cur.close()
   if userrole=='user':
        if res and res['password']==password:
            print("user already exits.Login successfully")
            return res['name']
        elif res and res['password']!=password:
            print("password is not correct")
            return "Incorrect"
        else:
            print("No user found.First register yourself")      
            return "No Data"

def user_register_form(userrole,name,gender,phone,email,password):
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("select password from user_details where email=%s",(email,)) 
   res=cur.fetchone()
   if userrole=='user':
      if res is None:
        cur.execute("insert into user_details(name,gender,phone,email,password) values(%s,%s,%s,%s,%s)",(name,gender,phone,email,password))
        con.commit()
        cur.close()
        print("User Registration successful")    
        return 0
      elif res:
        print("User Already exists") 
        return 1  

def admin_login_form(userrole,email,password):
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("select name,email,password from admin_details where email=%s",(email,))
   res=cur.fetchone()
   cur.close()
   if userrole=='admin':
      if res and res['password']==password:
         print("Admin already exits.Login successfully")
         return res['name']
      elif res and res['password']!=password:
         print("password is not correct")
         return "Incorrect"
      else:
         print("No admin found.First register yourself")      
         return "No Data"   

 

def admin_register_form(userrole,name,gender,phone,email,password):
   from app import mysql
   con=mysql.connect
   cur=con.cursor()
   cur.execute("select password from admin_details where email=%s",(email,)) 
   res=cur.fetchone()
   if userrole=='admin':
      if res is None:
        cur.execute("insert into admin_details(name,gender,phone,email,password) values(%s,%s,%s,%s,%s)",(name,gender,phone,email,password))
        con.commit()
        cur.close()
        print(" Admin Registration successful")    
        return 0
      else:
        print("Admin Already exists")     
        return 1
   
def book_events(date, starttime, endtime, location):
    from app import mysql
    con = mysql.connect
    cur = con.cursor()
    start_dt = datetime.combine(date, starttime)
    end_dt = datetime.combine(date, endtime)

    # Ensure booking duration does not exceed 2 hours
    if (end_dt - start_dt) > timedelta(hours=2):
        flash("Booking duration cannot exceed 2 hours.")
        return 2

    # Conflict check — overlaps with existing bookings
    cur.execute("""
        SELECT * FROM booking_details1 
        WHERE date = %s AND location = %s AND (
            (starttime < %s AND endtime > %s) OR 
            (starttime < %s AND endtime > %s) OR
            (starttime >= %s AND endtime <= %s)
        )
    """, (date, location, endtime, starttime, endtime, endtime, starttime, endtime))

    existing = cur.fetchone()
    cur.close()

    if existing is None:
        return 0  # Available
    else:
        return 1  # Conflict


def get_user_booking_count(username):
    from app import mysql
    con = mysql.connect
    cur = con.cursor(MySQLdb.cursors.DictCursor)  # ✅ use DictCursor

    try:
        cur.execute("SELECT uid FROM user_details WHERE name = %s", (username,))
        user = cur.fetchone()

        if user is None:
            return 0

        user_id = user['uid']

        cur.execute("SELECT COUNT(*) AS total FROM booking_details1 WHERE uid = %s", (user_id,))
        count = cur.fetchone()['total']  # ✅ safe key access

        return count
    finally:
        cur.close()
