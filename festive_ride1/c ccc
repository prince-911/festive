   app.py

from flask import Flask,render_template,request,redirect,url_for
# from form import LoginForm,RegForm
import mysql.connector
from flask_mysqldb import MySQL

app=Flask(__name__)
# app.config['MYSQL_HOSt']='localhost'
# app.config['MYSQL_USER']='root'
# app.config['MYSQL_PASSWORD']=""
# app.config['MYSQL_DB']='festive_ride'
# app.config['MYSQL_CURSORCLASS']='DictCursor'
# app.config['SECRET_KEY']='1234 This is a secret key'
# mysql=MySQL(app)
@app.route('/')
def home():
    return render_template('index.html')

# @app.route('/login',methods=['GET','POST'])
# def admin():
#     admin=LoginForm()
#     msg1=""
#     conn=mysql.connect
#     cur=conn.cursor()
#     cur.execute("select count(*) as c from admin where email=%s and password=%s",(admin.login_email.data,admin.login_password.data))
#     v1=cur.fetchone()['c']
#     if (admin.validate_on_submit()):
#         if(v1==1):
#             msg1="Logged In Sucessfully"
#         else:
#             msg1="Invalid Crendentials"
#     return render_template("login.html",login_form=admin,msg=msg1)
        
if __name__ == "__main__":
    app.run(debug=True)


registration.html


<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <title>Register</title>
   <style>
       body {
           margin: 0;
           font-family: 'Segoe UI', sans-serif;
           background-color: #fff;
           display: flex;
           height: 100vh;
       }

       .container {
           display: flex;
           flex: 1;
       }

       .form-section {
           flex: 1;
           display: flex;
           flex-direction: column;
           justify-content: center;
           padding: 4rem;
       }

       .form-section h2 {
           font-size: 2rem;
           margin-bottom: 2rem;
       }

       form {
           max-width: 400px;
           width: 100%;
       }

       input[type="text"],
       input[type="email"],
       input[type="password"] {
           width: 100%;
           padding: 0.75rem 1rem;
           margin-bottom: 1rem;
           border-radius: 10px;
           border: 1px solid #ccc;
           background-color: #f9f9f9;
       }

       .privacy {
           display: flex;
           align-items: center;
           margin: 1rem 0;
           font-size: 0.9rem;
       }

       .privacy input {
           margin-right: 0.5rem;
       }

       .registerBtn {
           width: 100%;
           background-color: #ff5a1f;
           color: white;
           border: none;
           padding: 0.75rem;
           border-radius: 10px;
           cursor: pointer;
           font-size: 1rem;
       }

       .link {
           text-align: center;
           margin-top: 1rem;
           font-size: 0.9rem;
       }

       .link a {
           color: #000;
           text-decoration: none;
           font-weight: bold;
       }

       .image-section {
           flex: 1;
           background: url("{{ url_for('static', filename='images/register.jpg') }}") no-repeat center center;
           background-size: cover;
       }

       @media (max-width: 768px) {
           .container {
               flex-direction: column;
           }

           .image-section {
               display: none;
           }

           .form-section {
               padding: 2rem;
           }
       }
   </style>
</head>
<body>
<div class="container">
   <div class="form-section">
       <h2>Create an account</h2>

       <form method="POST" action="/register">
           {{ reg_form.csrf_token }}

           {{ reg_form.reg_username(placeholder="Username") }}
           {{ reg_form.reg_firstname(placeholder="First Name") }}
           {{ reg_form.reg_middlename(placeholder="Middle Name") }}
           {{ reg_form.reg_lastname(placeholder="Last Name") }}
           {{ reg_form.reg_email(placeholder="Email") }}
           {{ reg_form.reg_number(placeholder="Contact Number") }}
           {{ reg_form.reg_password(placeholder="Password") }}
           {{ reg_form.reg_confirm_password(placeholder="Confirm Password") }}

           <div class="privacy">
               <input type="checkbox" required>
               I accept the <a href="#">Privacy Policy</a>
           </div>

           {{ reg_form.reg_submit(class_="registerBtn") }}
       </form>

       <div class="link">
           Already have an account? <a href="/login">Log In</a>
       </div>
       {% if msg %}
       <p style="color:green;">{{ msg }}</p>
       {% endif %}
   </div>

   <div class="image-section">
       <!-- Background handled in CSS -->
   </div>
</div>
</body>
</html>
 


form.py

from flask_wtf import FlaskForm
from wtforms import StringField,PasswordField,SubmitField,RadioField,EmailField,IntegerField
from wtforms.validators import InputRequired,Length,EqualTo,NumberRange,DataRequired,Email

class LoginForm(FlaskForm):
    login_email=EmailField("User Email: ",validators=[InputRequired()],render_kw={"placeholder":"User Email","class":"inputfield"})
    login_password=PasswordField("Password: ",validators=[InputRequired()],render_kw={"placeholder":"Password","class":"inputfield"})
    login_submit=SubmitField("Submit",render_kw={"class":"registerBtn"})


class RegForm(FlaskForm):
   reg_username=StringField("UserName",validators=[DataRequired()])
   reg_firstname = StringField('First Name:', validators=[DataRequired()])
   reg_middlename = StringField('Middle Name:', validators=[DataRequired()])
   reg_lastname = StringField('Last Name:', validators=[DataRequired()])
   reg_email = EmailField('Email:', validators=[DataRequired(), Email()])
   reg_number = StringField('Contact Number:', validators=[DataRequired(),Length(min=10,max=10)])
   reg_password = PasswordField('Password:', validators=[DataRequired()])
   reg_confirm_password = PasswordField('Confirm Password:', validators=[DataRequired(), EqualTo('reg_password')])
   reg_submit = SubmitField('Submit')
    

main.py

from db import mysql

def registration(username,firstname,middlename,lastname,email,number,password,confirm_password):
    if(password==confirm_password):
        conn=mysql.connect
        cur=conn.cursor()
        cur.execute("insert into admin (username,firstname,middlename,lastname,email,number,password)) values (%s,%s,%s,%s,%s,%s,%s)",(username,firstname,middlename,lastname,email,number,password))
        conn.commit()
        cur.close()
        conn.close()
        return True
    else:
        return False
